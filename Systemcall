trace.c:
对trace.c，首先就是调用系统函数trace(int)
trace(int):根据传入的数字，对指定的系统调用进行监视。
然后exec执行trace的后面参数，比如 grep

trace（int）系统调用:
首先需要在user.h里声明这一系统调用，才能在.c里使用。
Makefile调用usys.pl生成usys.S,通过ecall进入kernel，通过a7表明调用哪种系统调用
所以要在usys.pl里加一个trace的入口

ecall进入内核入口程序kernel/syscall.c
首先在syscall.h中定义SYS_trace 22号调用，以及在.c完善向量表
在proc结构体里面加一个mask，用于记录监视的系统调用号
（xv6内核为每个进程维护许多状态片段，并将它们聚集到一个proc结构体中，例如页表pagetable）
然后是sys_trace的具体实现。要在kernel/sysproc.c中去写，其实就是把当前a0放进mask（表明当前系统调用号）（不是很清楚）
  // 获取系统调用的参数
  argint(0, &(myproc()->trace_mask));
（用户代码将exec需要的参数放在寄存器a0和a1中，并将系统调用号放在a7中。）
（所谓argint就是从寄存器里读取相应的参数。而系统调用参数依次存档在a0，a1中）

写好了实现，然后就是在syscall中声明sys_trace的外部定义,并在函数指针数组新增sys_trace

最后在syscall函数里要输出监视的调用，所以需要添加一个数组，里面放着系统调用号对应的名字。

sysinfo：//增加该系统调用，实现功能：传出剩余空间及当前非UNUSED进程数
首先建立一个sysinfo.c文件，里面什么都不写。
在user.h定义sysinfo的系统调用
usys是系统调用入口，所以添加sysinfo的入口

内核入口程序kernel/syscall.c
在syscall.h中定义系统调用号23
并在syscall.c中完善sysinfo的入口向量表
因为传出参数，所以建立结构体struct sysinfo记录要传出的数据
然后师sysinfo的具体实现：到kernel/sysproc.c去写实现。其中主要涉及三个方面
1、剩余地址空间大小的获取
kernel/kalloc.c是对内存进行操作，内存采用固定分页，链表连接。对链表所有结点访问，记录页块数，然后返回总大小int
2、非UNUSED进程数获取
kernel/proc.c是对进程的操作。对每个进程proc[]访问，判断状态，记录，返回int
3、sysinfo结构体传出
int copyout(pagetable_t, uint64, char *, uint64);根据页表，地址，传出数据地址，传输数据大小，将sysinfo传出
sysinfo.c将info结构体传出系统调用，然后输出info的参数
注意：
务必注意头文件include的次序，否则会大量报错未定义。。。
